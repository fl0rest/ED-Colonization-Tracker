// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addDepotEvent = `-- name: AddDepotEvent :exec
;

INSERT INTO depotEvents (completion, time, marketId, raw_text)
VALUES (?1, ?2, ?3, ?4)
`

type AddDepotEventParams struct {
	Completion float64
	Time       int64
	MarketId   int64
	RawText    string
}

func (q *Queries) AddDepotEvent(ctx context.Context, arg AddDepotEventParams) error {
	_, err := q.db.ExecContext(ctx, addDepotEvent,
		arg.Completion,
		arg.Time,
		arg.MarketId,
		arg.RawText,
	)
	return err
}

const addDockEvent = `-- name: AddDockEvent :exec
INSERT INTO dockEvents (time, marketId, systemName, stationName)
VALUES (?1, ?2, ?3, ?4)
`

type AddDockEventParams struct {
	Time        int64
	MarketId    string
	SystemName  string
	StationName string
}

func (q *Queries) AddDockEvent(ctx context.Context, arg AddDockEventParams) error {
	_, err := q.db.ExecContext(ctx, addDockEvent,
		arg.Time,
		arg.MarketId,
		arg.SystemName,
		arg.StationName,
	)
	return err
}

const addEvent = `-- name: AddEvent :exec
INSERT INTO events (time, completion, marketId, systemName, stationName, raw_resources)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
`

type AddEventParams struct {
	Time         int64
	Completion   float64
	MarketId     int64
	SystemName   string
	StationName  string
	RawResources string
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) error {
	_, err := q.db.ExecContext(ctx, addEvent,
		arg.Time,
		arg.Completion,
		arg.MarketId,
		arg.SystemName,
		arg.StationName,
		arg.RawResources,
	)
	return err
}

const findResourceId = `-- name: FindResourceId :one
;

select id
from resources
where name =?1
`

func (q *Queries) FindResourceId(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, findResourceId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findResourceName = `-- name: FindResourceName :one
;

select name
from resources
where id =?1
`

func (q *Queries) FindResourceName(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, findResourceName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getInaraId = `-- name: GetInaraId :one
;

select id
from resourceids
where name like '%' ||?1 || '%'
`

func (q *Queries) GetInaraId(ctx context.Context, query sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getInaraId, query)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getLatestEvent = `-- name: GetLatestEvent :one
select id, time, completion, marketid, systemname, stationname, raw_resources
from events
order by time desc
limit 1
`

func (q *Queries) GetLatestEvent(ctx context.Context) (Event, error) {
	row := q.db.QueryRowContext(ctx, getLatestEvent)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Time,
		&i.Completion,
		&i.Marketid,
		&i.Systemname,
		&i.Stationname,
		&i.RawResources,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
select id, time, completion, marketid, systemname, stationname, raw_resources
from events
order by time desc
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Completion,
			&i.Marketid,
			&i.Systemname,
			&i.Stationname,
			&i.RawResources,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResource = `-- name: ListResource :one
;

select id, eventid, name, required, provided, diff, payment, time
from resources
where name like '%' ||?1 || '%' or id like '%' ||?1 || '%'
`

func (q *Queries) ListResource(ctx context.Context, query sql.NullString) (Resource, error) {
	row := q.db.QueryRowContext(ctx, listResource, query)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Eventid,
		&i.Name,
		&i.Required,
		&i.Provided,
		&i.Diff,
		&i.Payment,
		&i.Time,
	)
	return i, err
}

const listResources = `-- name: ListResources :many
select id, eventid, name, required, provided, diff, payment, time
from resources
order by diff desc
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Eventid,
			&i.Name,
			&i.Required,
			&i.Provided,
			&i.Diff,
			&i.Payment,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertResource = `-- name: UpsertResource :exec
;

insert into resources (id, eventId, name, required, provided, diff, payment, time)
values (?, ?, ?, ?, ?, ?, ?, ?) on conflict(id) do update set
  eventId = excluded.eventId,
  required = excluded.required,
  provided = excluded.provided,
  diff = excluded.diff,
  payment = excluded.payment,
  time = excluded.time
  where excluded.provided != provided
`

type UpsertResourceParams struct {
	ID       int64
	Eventid  int64
	Name     string
	Required int64
	Provided int64
	Diff     int64
	Payment  int64
	Time     int64
}

func (q *Queries) UpsertResource(ctx context.Context, arg UpsertResourceParams) error {
	_, err := q.db.ExecContext(ctx, upsertResource,
		arg.ID,
		arg.Eventid,
		arg.Name,
		arg.Required,
		arg.Provided,
		arg.Diff,
		arg.Payment,
		arg.Time,
	)
	return err
}
