// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addEvent = `-- name: AddEvent :one
;

INSERT INTO events (raw_text, time)
VALUES (?1, ?2)
RETURNING id, raw_text, time
`

type AddEventParams struct {
	RawText string
	Time    int64
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, addEvent, arg.RawText, arg.Time)
	var i Event
	err := row.Scan(&i.ID, &i.RawText, &i.Time)
	return i, err
}

const findResourceId = `-- name: FindResourceId :one
;

select id
from resources
where name =?1
`

func (q *Queries) FindResourceId(ctx context.Context, name string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, findResourceId, name)
	var id interface{}
	err := row.Scan(&id)
	return id, err
}

const findResourceName = `-- name: FindResourceName :one
;

select name
from resources
where id =?1
`

func (q *Queries) FindResourceName(ctx context.Context, id interface{}) (string, error) {
	row := q.db.QueryRowContext(ctx, findResourceName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listEvents = `-- name: ListEvents :many
select id, raw_text, time
from events
order by time desc
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(&i.ID, &i.RawText, &i.Time); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResource = `-- name: ListResource :one
;

select id, name, required, provided, diff, payment, time
from resources
where name like '%' ||?1 || '%' or id like '%' ||?1 || '%'
`

func (q *Queries) ListResource(ctx context.Context, query sql.NullString) (Resource, error) {
	row := q.db.QueryRowContext(ctx, listResource, query)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Required,
		&i.Provided,
		&i.Diff,
		&i.Payment,
		&i.Time,
	)
	return i, err
}

const listResources = `-- name: ListResources :many
select id, name, required, provided, diff, payment, time
from resources
order by diff desc
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Required,
			&i.Provided,
			&i.Diff,
			&i.Payment,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
